import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix

df = pd.read_csv('/content/drive/MyDrive/Datasets/data.csv')

df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})

X = df.drop(['diagnosis', 'id', 'Unnamed: 32'], axis=1)
y = df['diagnosis'].values.reshape(-1, 1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

learning_rate = 0.1
iterations = 10000
N = y_train.size

input_size = 30
hidden_size = 5
output_size = 1

np.random.seed(10)

W1 = np.random.normal(scale=0.5, size=(input_size, hidden_size))
W2 = np.random.normal(scale=0.5, size=(hidden_size, output_size))

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def mean_squared_error(y_pred, y_true):
    return ((y_pred - y_true) ** 2).sum() / (2 * y_pred.size)

def accuracy(y_pred, y_true):
    acc = y_pred.round() == y_true
    return acc.mean()

results_list = []
for itr in range(iterations):
    Z1 = np.dot(X_train_scaled, W1)
    A1 = sigmoid(Z1)

    Z2 = np.dot(A1, W2)
    A2 = sigmoid(Z2)

    mse = mean_squared_error(A2, y_train)
    acc = accuracy(A2, y_train)

    E1 = A2 - y_train
    dW1 = E1 * A2 * (1 - A2)

    E2 = np.dot(dW1, W2.T)
    dW2 = E2 * A1 * (1 - A1)

    W2_update = np.dot(A1.T, dW1) / N
    W1_update = np.dot(X_train_scaled.T, dW2) / N

    W2 = W2 - learning_rate * W2_update
    W1 = W1 - learning_rate * W1_update
    results_list.append(pd.DataFrame({"mse": [mse], "accuracy": [acc]}))
results = pd.concat(results_list, ignore_index=True)

Z1_test = np.dot(X_test_scaled, W1)
A1_test = sigmoid(Z1_test)

Z2_test = np.dot(A1_test, W2)
A2_test = sigmoid(Z2_test)

acc_test = accuracy(A2_test, y_test)
print("Accuracy on Test Set: {}".format(acc_test))

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(results['mse'], label='Mean Squared Error')
plt.title('Mean Squared Error during Training')
plt.xlabel('Iterations')
plt.ylabel('Mean Squared Error')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(results['accuracy'], label='Accuracy')
plt.title('Accuracy during Training')
plt.xlabel('Iterations')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

conf_matrix = confusion_matrix(y_test, A2_test.round())
print("\nConfusion Matrix:")
print(conf_matrix)
